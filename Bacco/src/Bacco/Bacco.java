/* Generated By:JavaCC: Do not edit this line. Bacco.java */
package Bacco;

import java.io.*;
import java.util.List;
import java.util.LinkedList;


public class Bacco implements BaccoConstants {

        static public boolean erro = false;
        static List<Comando> listaComando = new LinkedList<Comando>();
        static Tabela tab = new Tabela();

  public static void main(String args[])  throws ParseException  {



      try {

         Bacco analisador = new Bacco(new FileInputStream("erro_semantico.bcc"));

         analisador.inicio(listaComando);
                         //System.out.println("\nTabela de Simbolos (Variaveis): \n\n"+tab.toString());
         // System.out.println(tab.toString());

      }

      catch(FileNotFoundException e) {

         System.out.println("Erro: arquivo n\u00e3o encontrado");

      }

      catch(TokenMgrError e) {

         System.out.println("Erro l\u00e9xico\u005cn" + e.getMessage());

      }

      catch(ParseException e) {

         System.out.println("Erro sint\u00e1tico\u005cn" + e.getMessage());

      }

   }

  static void S() throws ParseException {
   Token t;

   do {

      t = getNextToken();

      //System.out.println(tokenImage[t.kind]+"\t"+t.image);

   }

   while(t.kind != EOF);
  }

  static final public void inicio(List<Comando> lista) throws ParseException {
    jj_consume_token(START);
    jj_consume_token(FIM_DA_LINHA);
    corpo(lista);
    jj_consume_token(END);
    jj_consume_token(FIM_DA_LINHA);
    jj_consume_token(0);
  }

  static final public void corpo(List<Comando> lista) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      dvar();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case REPEAT:
      case IF:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      comandos(lista);
    }

  }

  static final public void dvar() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(FIM_DA_LINHA);
    label_3:
    while (true) {
      criar_var();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO_TEXTO:
      case TIPO_NUMERICO:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(ENDAVAR);
    jj_consume_token(FIM_DA_LINHA);
  }

  static final public void criar_var() throws ParseException {
                     char tp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO_NUMERICO:
      jj_consume_token(TIPO_NUMERICO);
                    tp='n';
      break;
    case TIPO_TEXTO:
      jj_consume_token(TIPO_TEXTO);
                                             tp='s';
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    itemListaVar(tp);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(VIRGULA);
      itemListaVar(tp);
    }
    jj_consume_token(FIM_DA_LINHA);
  }

  static final public void itemListaVar(char tp) throws ParseException {
                              Simbolo simb; Token t; Expressao expressao; boolean tipoCerto;
    t = jj_consume_token(ID);
         //acao semantica para verificar se variavel ta sendo declarada pela segunda vez
                if(tab.isExiste(t.image))
                        System.err.println("ERRO!\u005cn Erro Sem\u00e2ntico: A v\u00e1riavel \u005c"" + t.image + "\u005c" foi declarada mais de uma vez\u005cn");
                else{
                        simb = new Simbolo(t.image, tp ,false);
                        tab.inclui(simb);
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTR:
      jj_consume_token(ATTR);
      expressao = exp();
                 //Ação semântica para verificar se a variavel esta recebendo uma expressão compativel com seu tipo


                        if(tp == 'n')
                                tipoCerto = expressao.isExpressaoNumerica(tab);
                        else
                                tipoCerto = expressao.isExpressaoTexto();

                        if(!tipoCerto)
                                System.err.println("ERRO!\u005cn Erro Sem\u00e2ntico: O tipo da variavel \u005c"" + t.image + "\u005c" n\u00e3o \u00e9 compat\u00edvel com a express\u00e3o atribuida ");
                 // Açãoo semantica para incluir na tabela que variavel foi inicializada
                        tab.inicializaIdent(t.image);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void comandos(List<Comando> lista) throws ParseException {
                                       Comando comando = new Comando('A');Token t; Expressao expressao; boolean tipoCerto; boolean foiDeclarada=true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      attr(lista);
      break;
    case IF:
      IsTrue(lista);
      break;
    case PRINT:
      print(lista);
      break;
    case REPEAT:
      loop(lista);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void attr(List<Comando> lista) throws ParseException {
                                  Comando comando = new Comando('A');Token t; Expressao expressao; boolean tipoCerto; boolean foiDeclarada=true;
    t = jj_consume_token(ID);
         comando.setRef1(t.image);
         // Ação semãntica para verificar se variavel foi declarada 
                if(!tab.isExiste(t.image)){
                        System.err.println("ERRO!\u005cn Erro Semantico: A v\u00e1riavel \u005c"" + t.image + "\u005c" n\u00e3o foi declarada\u005cn");
                        foiDeclarada = false;
                }
    jj_consume_token(ATTR);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXTO:
      case TIPO_INTEGRAL:
      case TIPO_DECIMAL:
      case READ:
      case ABRE_PARENTESES:
      case SOMA:
      case SUB:
      case ID:
      case NOT:
      case CONCATENAR:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXTO:
      case TIPO_INTEGRAL:
      case TIPO_DECIMAL:
      case ABRE_PARENTESES:
      case SOMA:
      case SUB:
      case ID:
      case NOT:
      case CONCATENAR:
        expressao = exp();
                comando.setRef2(expressao);
         //Ação semântica para verificar se a váriavel está recebendo uma expressão compatível com seu tipo	
                if(foiDeclarada){
                        if(tab.getSimbolo(t.image).getTipo() == 'n')
                                tipoCerto = expressao.isExpressaoNumerica(tab);
                        else
                                tipoCerto = expressao.isExpressaoTexto();

                        if(!tipoCerto)
                        System.err.println("ERRO!\u005cn Erro Sem\u00e2ntico: O tipo da variavel \u005c"" + t.image + "\u005c" n\u00e3o \u00e9 compat\u00edvel com a express\u00e3o atribuida  "+"\u005cn");
                }
         //Ação semântica para incluir na tabela que variavel foi inicializada
                tab.inicializaIdent(t.image);
                lista.add(comando);
        break;
      case READ:
        read(lista);
         //Ação semântica para incluir na tabela que variavel foi inicializada
                tab.inicializaIdent(t.image);
                lista.add(comando);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(FIM_DA_LINHA);
  }

//O mesmo exp é usado para todos os comandos - A incompatibilidade de tipos será verificada depois
  static final public Expressao exp() throws ParseException {
                   Expressao listaExp = new Expressao();
    expAuxiliar(listaExp);
         {if (true) return listaExp;}
    throw new Error("Missing return statement in function");
  }

  static final public void expAuxiliar(Expressao listaExp) throws ParseException {
    termo(listaExp);
  }

  static final public void termo(Expressao listaExp) throws ParseException {
                                  Token t; Item item;
    termo1(listaExp);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(OR);
      termo1(listaExp);
                  //Depois que os dois termos da operação foram armazenados na lista, ent�o o operador é armazenado
                        item = new Item('o', t.image);
                        listaExp.inclui(item);
    }
  }

  static final public void termo1(Expressao listaExp) throws ParseException {
                                   Token t; Item item;
    termo2(listaExp);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(AND);
      termo2(listaExp);
                        item = new Item('o', t.image);
                        listaExp.inclui(item);
    }
  }

  static final public void termo2(Expressao listaExp) throws ParseException {
                                   Token t; Item item;
    termo3(listaExp);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIOR:
      case MENOR:
      case MAIORIGUAL:
      case MENORIGUAL:
      case DIFERENTE:
      case IGUAL:
      case CONCATENAR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIOR:
        t = jj_consume_token(MAIOR);
        break;
      case MENOR:
        t = jj_consume_token(MENOR);
        break;
      case MAIORIGUAL:
        t = jj_consume_token(MAIORIGUAL);
        break;
      case MENORIGUAL:
        t = jj_consume_token(MENORIGUAL);
        break;
      case DIFERENTE:
        t = jj_consume_token(DIFERENTE);
        break;
      case IGUAL:
        t = jj_consume_token(IGUAL);
        break;
      case CONCATENAR:
        t = jj_consume_token(CONCATENAR);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo3(listaExp);
                        item = new Item('o', t.image);
                        listaExp.inclui(item);
    }
  }

  static final public void termo3(Expressao listaExp) throws ParseException {
                                   Token t; Item item;
    termo4(listaExp);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUB:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        t = jj_consume_token(SOMA);
        termo4(listaExp);
                 //Seção 9.5 - Otimiza a expressao (otimizaExp é para calculos envolvendo constantes (5+4+a==9+a), 
                 //tambem é verificado a existencia de elementos neutro e tem o adicional de otimizacao de string("ab"+"c"="abc"))
                 //O operador só será inserido se não for possivel nenhuma das otimizações 
                        if(!listaExp.otimizaExpressao('+') && !listaExp.otimizaString()){
                                item = new Item('o', t.image);
                                listaExp.inclui(item);
                        }
        break;
      case SUB:
        t = jj_consume_token(SUB);
        termo4(listaExp);
                        if(!listaExp.otimizaExpressao('-')){
                                item = new Item('o', t.image);
                                listaExp.inclui(item);
                        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void termo4(Expressao listaExp) throws ParseException {
                                   Token t; Item item;
    termo5(listaExp);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVISAO:
      case MULTI:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTI:
        t = jj_consume_token(MULTI);
        termo5(listaExp);
                        if(!listaExp.otimizaExpressao('*')){
                                item = new Item('o', t.image);
                                listaExp.inclui(item);
                        }
        break;
      case DIVISAO:
        t = jj_consume_token(DIVISAO);
        termo5(listaExp);
                        if(!listaExp.otimizaExpressao('/')){
                                item = new Item('o', t.image);
                                listaExp.inclui(item);
                        }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void termo5(Expressao listaExp) throws ParseException {
                                   Token t; Item item;
    termo6(listaExp);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POTENCIA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_11;
      }
      t = jj_consume_token(POTENCIA);
      termo6(listaExp);
                        if(!listaExp.otimizaExpressao('^')){
                                item = new Item('o', t.image);
                                listaExp.inclui(item);
                        }
    }
  }

  static final public void termo6(Expressao listaExp) throws ParseException {
                                   Token t=null; Item item; int cont_OP_NOT=0;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_12;
      }
      t = jj_consume_token(NOT);
                   cont_OP_NOT++;
    }
    termo7(listaExp);
         // Se não tiver nenhum operador not não tem nehum operador a armazenar
                if(t != null && (cont_OP_NOT % 2 != 0)){
                        item = new Item('o', t.image);
                        listaExp.inclui(item);
                }
  }

  static final public void termo7(Expressao listaExp) throws ParseException {
                                   Token t; Item item;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCATENAR:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_13;
      }
      t = jj_consume_token(CONCATENAR);
                 // Se não tiver nenhum operador concatenar não tem nehum operador a armazenar
                                item = new Item('o', t.image);
                                listaExp.inclui(item);
    }
    termo8(listaExp);
  }

  static final public void termo8(Expressao listaExp) throws ParseException {
                                   Token t, t_aux=null; Item item; String num;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO_INTEGRAL:
    case TIPO_DECIMAL:
    case SOMA:
    case SUB:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUB:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUB:
          t_aux = jj_consume_token(SUB);
          break;
        case SOMA:
          t_aux = jj_consume_token(SOMA);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO_INTEGRAL:
        t = jj_consume_token(TIPO_INTEGRAL);
        break;
      case TIPO_DECIMAL:
        t = jj_consume_token(TIPO_DECIMAL);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           // t_aux pode não ter pois é opicional o sinal a frente do numero
                if(t_aux != null)
                        num = t_aux.image + t.image;
                else
                        num = t.image;
            item = new Item('n', num);
        listaExp.inclui(item);
      break;
    case ID:
      t = jj_consume_token(ID);
           // Verifica se foi declarado

                if(!tab.isExiste(t.image))
                        System.err.println("ERRO!\u005cn Erro Semantico: A v\u00e1riavel \u005c"" + t.image + "\u005c" n\u00e3o foi declarada\u005cn");
           //Verifica se foi inicializado

                if(!tab.foiInicializado(t.image))
                        System.err.println("ERRO!\u005cn Erro Semantico: A v\u00e1riavel \u005c"" + t.image + "\u005c" n\u00e3o foi inicializada\u005cn");
      break;
    case TEXTO:
      t = jj_consume_token(TEXTO);
                item = new Item('s', t.image);
        listaExp.inclui(item);
      break;
    case ABRE_PARENTESES:
      jj_consume_token(ABRE_PARENTESES);
      expAuxiliar(listaExp);
      jj_consume_token(FECHA_PARENTESES);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IsTrue(List<Comando> lista) throws ParseException {
                                    LinkedList<Comando> listaSe = new LinkedList<Comando>();Comando se = new Comando('S');Expressao expressao;
    jj_consume_token(IF);
    jj_consume_token(ABRE_PARENTESES);
    expressao = exp();
         se.setRef1(expressao);

        //Verifica se a expressao utilizada na condicao é compativel
        if(!expressao.isExpressaoCondicional(tab))
                System.err.println("ERRO!\u005cn Erro Sem\u00e2ntico: A condi\u00e7\u00e3o utilizada na estrutura IsTrue(){} n\u00e3o \u00e9 compat\u00edvel\u005cn");
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(ABRE_CHAVE);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case REPEAT:
      case IF:
      case ID:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_14;
      }
      comandos(listaSe);
    }
                se.setRef2(listaSe);
    jj_consume_token(FECHA_CHAVE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      IsNot(lista,se);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
                lista.add(se);
  }

  static final public void IsNot(List<Comando> lista,Comando se) throws ParseException {
                                              LinkedList<Comando> listaSenao = new LinkedList<Comando>();
    jj_consume_token(ELSE);
    jj_consume_token(ABRE_CHAVE);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case REPEAT:
      case IF:
      case ID:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_15;
      }
      comandos(listaSenao);
    }
                se.setRef3(listaSenao);
    jj_consume_token(FECHA_CHAVE);
  }

  static final public void read(List<Comando> lista) throws ParseException {
    jj_consume_token(READ);
    jj_consume_token(ABRE_PARENTESES);
    corpoEntrada(lista);
    jj_consume_token(FECHA_PARENTESES);
  }

  static final public void corpoEntrada(List<Comando> lista) throws ParseException {
                                          Comando comandoImprime = new Comando('I');Comando comandoLeia = new Comando('L');Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXTO:
      t = jj_consume_token(TEXTO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        jj_consume_token(VIRGULA);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
                 comandoImprime.setRef1(t.image);
                 lista.add(comandoImprime);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  static final public void print(List<Comando> lista) throws ParseException {
                                   Expressao expressao;
    jj_consume_token(PRINT);
    jj_consume_token(ABRE_PARENTESES);
    corpoMostra(lista);
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(FIM_DA_LINHA);
  }

  static final public void corpoMostra(List<Comando> lista) throws ParseException {
                                         Expressao expressao;Comando comandoExibe = new Comando('I');Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXTO:
      t = jj_consume_token(TEXTO);
      jj_consume_token(CONCATENAR);
           comandoExibe.setRef1(t.image);
               lista.add(comandoExibe);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    expressao = exp();
                if(!expressao.isExpressaoTexto())
                        System.err.println("ERRO!\u005cn Erro Sem\u00e2ntico: A express\u00e3o utilizada na estrutura print() n\u00e3o \u00e9 compat\u00edvel\u005cn");

                comandoExibe.setRef1(expressao);
                lista.add(comandoExibe);
  }

  static final public void loop(List<Comando> lista) throws ParseException {
                                  LinkedList<Comando> listaEnquanto = new LinkedList<Comando>();Comando enquanto = new Comando('E');Expressao expressao;
    jj_consume_token(REPEAT);
    jj_consume_token(ABRE_PARENTESES);
    expressao = exp();
                enquanto.setRef1(expressao);

                //Verifica se a expressao utilizada na condicao é compativel
                if(!expressao.isExpressaoCondicional(tab))
                        System.err.println("ERRO!\u005cn Erro Sem\u00e2ntico: A condi\u00e7\u00e3o utilizada na estrutura enquanto(){} n\u00e3o \u00e9 compat\u00edvel\u005cn");
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(ABRE_CHAVE);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case REPEAT:
      case IF:
      case ID:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_16;
      }
      comandos(listaEnquanto);
    }
                enquanto.setRef2(listaEnquanto);
                lista.add(enquanto);
    jj_consume_token(FECHA_CHAVE);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BaccoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x80018000,0x0,0x0,0x0,0x200000,0x80018000,0xc407800,0xc407800,0x0,0x0,0x0,0x0,0xc000000,0xc000000,0x30000000,0x30000000,0x40000000,0x0,0x0,0xc000000,0xc000000,0x3000,0xc403800,0x80018000,0x0,0x80018000,0x0,0x800,0x800,0x80018000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x8,0x6,0x6,0x4000,0x0,0x8,0x3008,0x3008,0x800,0x400,0x23f0,0x23f0,0x0,0x0,0x0,0x0,0x0,0x1000,0x2000,0x0,0x0,0x0,0x8,0x8,0x1,0x8,0x4000,0x0,0x0,0x8,};
   }

  /** Constructor with InputStream. */
  public Bacco(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Bacco(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BaccoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Bacco(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BaccoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Bacco(BaccoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BaccoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Bacco)
package Bacco;

import java.io.*;
import java.util.List;
import java.util.LinkedList;


public class Bacco
{

	static public boolean erro = false;
	static List<Comando> listaComando = new LinkedList<Comando>();
	static Tabela tab = new Tabela();
  
  public static void main(String args[])  throws ParseException  {



      try {

         Bacco analisador = new Bacco(new FileInputStream("erro_semantico.bcc"));

         analisador.inicio(listaComando);
                         //System.out.println("\u005cnTabela de Simbolos (Variaveis): \u005cn\u005cn"+tab.toString());
         // System.out.println(tab.toString());

      }

      catch(FileNotFoundException e) {

         System.out.println("Erro: arquivo não encontrado");

      }

      catch(TokenMgrError e) {

         System.out.println("Erro léxico\n" + e.getMessage());

      }

      catch(ParseException e) {

         System.out.println("Erro sintático\n" + e.getMessage());

      }

   }
}

PARSER_END(Bacco)
SKIP : { " " | "\t" | "\r" | "\n" }

 

SKIP : /* Comentários */
{
	"@" : comentario_linha
| ":--" : comentario
}
<comentario_linha> SKIP: {
	<["\n","\r"]> : DEFAULT |
   	<~[]>
}

<comentario> SKIP: {

   "--:" : DEFAULT |

   <~[]>

}

 TOKEN : {

  < TEXTO: "\""(~["\""] | "\\" "\"")*"\"" > |
  < TIPO_INTEGRAL:(["0"-"9"])+  > |
  < TIPO_DECIMAL: (["0"-"9"])*(".")?(["0"-"9"])+  > 
}


 TOKEN [IGNORE_CASE] : {

  < READ: "read" > |
  < PRINT: "print" > |
  < REPEAT: "repeat" >

} 

TOKEN: {
  < START:"Start" >|
  < END:"End" > |
  < VAR:"Var" >|
  < ENDAVAR:"EndVar" >|
  < ATTR: "=" > |
  < ABRE_PARENTESES:"(" > |
  < FECHA_PARENTESES:")" >|
  < ABRE_CHAVE:"{" > |
  < FECHA_CHAVE:"}" >|
  < SOMA: "+" >|
  < SUB: "-" >|
  < DIVISAO: "/" >|
  < MULTI: "*" >|
  < POTENCIA: "^" >|
  < IF: "IsTrue" >|
  < ELSE:"IsNot" >|
  < TIPO_TEXTO: "text" >|
  < TIPO_NUMERICO: "number" >|
  < ID:["a"-"z","A"-"Z"](["0"-"9"]|["a"-"z","A"-"Z"])* >|
  < MAIOR: ">"> |
  < MENOR: "<"> |
  < MAIORIGUAL: ">="> |
  < MENORIGUAL: "<="> |
  < DIFERENTE: "!="> |
  < IGUAL: "=="> |
  < AND: "&&" >|
  < OR: "||" >|
  < NOT: "!" >|
  < CONCATENAR: "#" >|
  < VIRGULA: "," > |
  < FIM_DA_LINHA:";" >

  
  
}


 


JAVACODE void S()

{

   Token t;

   do {

      t = getNextToken();

      //System.out.println(tokenImage[t.kind]+"\t"+t.image);

   }

   while(t.kind != EOF);

}

void inicio(List<Comando> lista) : {}
{
	<START><FIM_DA_LINHA> corpo(lista) <END><FIM_DA_LINHA><EOF>
}
void corpo(List<Comando> lista) : {}
{
    (dvar())* (comandos(lista))*
     {
      //System.out.println(lista);
   }
}
void dvar() : { }
{
	<VAR><FIM_DA_LINHA> (criar_var())+ <ENDAVAR><FIM_DA_LINHA>
}

void criar_var() : { char tp; }
{
  (<TIPO_NUMERICO> {tp='n';} | <TIPO_TEXTO> {tp='s';} ) itemListaVar(tp)(<VIRGULA> itemListaVar(tp))* <FIM_DA_LINHA>
}
void itemListaVar(char tp) : {Simbolo simb; Token t; Expressao expressao; boolean tipoCerto;}
{
    t=<ID>
	{//acao semantica para verificar se variavel ta sendo declarada pela segunda vez
		if(tab.isExiste(t.image))
			System.err.println("ERRO!\n Erro Semântico: A váriavel \"" + t.image + "\" foi declarada mais de uma vez\n");
		else{
			simb = new Simbolo(t.image, tp ,false);
			tab.inclui(simb);
		}	
	}
	// Variavel pode ser inicializada ou não
	(
		<ATTR> expressao = exp()
		{//Ação semântica para verificar se a variavel esta recebendo uma expressão compativel com seu tipo

		
			if(tp == 'n')
				tipoCerto = expressao.isExpressaoNumerica(tab);
			else
				tipoCerto = expressao.isExpressaoTexto();
		
			if(!tipoCerto)
				System.err.println("ERRO!\n Erro Semântico: O tipo da variavel \"" + t.image + "\" não é compatível com a expressão atribuida ");
						
		}
		{// Açãoo semantica para incluir na tabela que variavel foi inicializada
			tab.inicializaIdent(t.image);
	    }		
	)?
}

void comandos(List<Comando> lista) : { Comando comando = new Comando('A');Token t; Expressao expressao; boolean tipoCerto; boolean foiDeclarada=true; }
{
    attr(lista) | IsTrue(lista)  | print(lista) | loop(lista)
}
void attr(List<Comando> lista) : {Comando comando = new Comando('A');Token t; Expressao expressao; boolean tipoCerto; boolean foiDeclarada=true;} 
{
  t=<ID>
	{comando.setRef1(t.image);}
	{// Ação semãntica para verificar se variavel foi declarada 
		if(!tab.isExiste(t.image)){
			System.err.println("ERRO!\n Erro Semantico: A váriavel \"" + t.image + "\" não foi declarada\n");
			foiDeclarada = false;
		}	
	}
	
	<ATTR> 
	
	( expressao = exp()
	{
		comando.setRef2(expressao);
	}
	{//Ação semântica para verificar se a váriavel está recebendo uma expressão compatível com seu tipo	
		if(foiDeclarada){
			if(tab.getSimbolo(t.image).getTipo() == 'n')
				tipoCerto = expressao.isExpressaoNumerica(tab);
			else
				tipoCerto = expressao.isExpressaoTexto();
		
			if(!tipoCerto)
		    	System.err.println("ERRO!\n Erro Semântico: O tipo da variavel \"" + t.image + "\" não é compatível com a expressão atribuida  "+"\n");
		}    
	}
	{
		tab.inicializaIdent(t.image);
		lista.add(comando);
	}
	| read(lista)
	
	{
		tab.inicializaIdent(t.image);
		lista.add(comando);
		
	}
	
	  )*
	
	
	 <FIM_DA_LINHA>
	
}
Expressao exp() : {Expressao listaExp = new Expressao();}
{
    expAuxiliar(listaExp)
	{return listaExp;}
}

void expAuxiliar(Expressao listaExp) : {}
{
	termo(listaExp)
}	

void termo(Expressao listaExp) : {Token t; Item item;}
{
	termo1(listaExp) 
	(
		 t=<OR> termo1(listaExp)
		 {
		 	item = new Item('o', t.image);
		 	listaExp.inclui(item);
		 }
	)*
}

void termo1(Expressao listaExp) : {Token t; Item item;}
{
	termo2(listaExp) 
	( 
		t=<AND> termo2(listaExp)
		{
			item = new Item('o', t.image);
		 	listaExp.inclui(item);
		}
	)*
}

void termo2(Expressao listaExp) : {Token t; Item item;}
{
	termo3(listaExp) 
	 ( 
	 	(t=<MAIOR> | t=<MENOR> | t=<MAIORIGUAL> | t=<MENORIGUAL> | t=<DIFERENTE> | t=<IGUAL> | t=<CONCATENAR>) 
	     termo3(listaExp)
	 	{
	 		item = new Item('o', t.image);
		 	listaExp.inclui(item);
	 	}
	 )*
}
void termo3(Expressao listaExp) : {Token t; Item item; }
{
	termo4(listaExp) 
	( 
		t=<SOMA> termo4(listaExp)
		{
			if(!listaExp.otimizaExpressao('+') && !listaExp.otimizaString()){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
		}	
		
		| 
		
		t=<SUB> termo4(listaExp)
		{
			if(!listaExp.otimizaExpressao('-')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
    		
		}
	)*
}

void termo4(Expressao listaExp) : {Token t; Item item;}
{
	termo5(listaExp) 
	(
		 
		  t=<MULTI> termo5(listaExp)
		  {
		  	if(!listaExp.otimizaExpressao('*')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
		  }
		   
		 |
		 
		  t=<DIVISAO> termo5(listaExp)
		 {
		 	if(!listaExp.otimizaExpressao('/')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
		 }
	)*
}

void termo5(Expressao listaExp) : {Token t; Item item;}
{
	termo6(listaExp) 
	( 
		t=<POTENCIA> termo6(listaExp) 
		{
			if(!listaExp.otimizaExpressao('^')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}	
		}
	)* 
}

void termo6(Expressao listaExp) : {Token t=null; Item item; int cont_OP_NOT=0;}
{
	( t=<NOT> {cont_OP_NOT++;})* termo7(listaExp)
	{
		if(t != null && (cont_OP_NOT % 2 != 0)){
			item = new Item('o', t.image);
			listaExp.inclui(item);
		}	
	}
}

void termo7(Expressao listaExp) : {Token t; Item item;}
{
	( t=<CONCATENAR>
		{
				item = new Item('o', t.image);
				listaExp.inclui(item);	
		}
	)*  termo8(listaExp)
		
	
}
void termo8(Expressao listaExp) : {Token t, t_aux=null; Item item; String num;}
{
	  
	  (t_aux=<SUB> | t_aux=<SOMA>)? (t=<TIPO_INTEGRAL> | t=<TIPO_DECIMAL>)
	  {
	  	if(t_aux != null)
	  		num = t_aux.image + t.image;
	  	else	
	  		num = t.image;
	    item = new Item('n', num);
        listaExp.inclui(item);
	  }
	  
	|
	
	 t=<ID>
	  {

		if(!tab.isExiste(t.image))
			System.err.println("ERRO!\n Erro Semantico: A váriavel \"" + t.image + "\" não foi declarada\n");
	  }
	  {

	  	if(!tab.foiInicializado(t.image))
	  		System.err.println("ERRO!\n Erro Semantico: A váriavel \"" + t.image + "\" não foi inicializada\n");
	  }
	  {
		item = new Item('v', t.image);
       	listaExp.inclui(item);	
      }	 
      
	| 
	
	 t=<TEXTO>
	 {
		item = new Item('s', t.image);
       	listaExp.inclui(item);	
	 }
	 
	| 
	 //O expAuxiliar existe pois: Cada vez que ocorrer um parênteses na expressão, o exp será 
	 //chamado e será criada uma nova lista precisando assim concatena-la a lista "principal" para formar só uma lista
	 <ABRE_PARENTESES> expAuxiliar(listaExp) <FECHA_PARENTESES>
}
void IsTrue(List<Comando> lista) : {LinkedList<Comando> listaSe = new LinkedList<Comando>();Comando se = new Comando('S');Expressao expressao;}
{
	<IF> <ABRE_PARENTESES>
	
	expressao = exp() 
	
	{
	 se.setRef1(expressao);
	 
	//Verifica se a expressao utilizada na condicao é compativel
	if(!expressao.isExpressaoCondicional(tab))
		System.err.println("ERRO!\n Erro Semântico: A condição utilizada na estrutura IsTrue(){} não é compatível\n");
	}
	
	
	<FECHA_PARENTESES>
	<ABRE_CHAVE>
	(
		comandos(listaSe)
	)*
	  
	{
		se.setRef2(listaSe);
	}
	<FECHA_CHAVE>
	( IsNot(lista,se) )?
	
	{
		lista.add(se);
	}
}
	     		
void IsNot(List<Comando> lista,Comando se) : {LinkedList<Comando> listaSenao = new LinkedList<Comando>();}
{
	<ELSE>
	 <ABRE_CHAVE>
	(
		comandos(listaSenao)
	)*
	  
	{
		se.setRef3(listaSenao);
	} 
	  
	<FECHA_CHAVE>
}

void read(List<Comando> lista) : {}
{
	<READ> <ABRE_PARENTESES> corpoEntrada(lista)<FECHA_PARENTESES>
}
void corpoEntrada(List<Comando> lista) : {Comando comandoImprime = new Comando('I');Comando comandoLeia = new Comando('L');Token t;}
{
	 (t=<TEXTO> (<VIRGULA>)?
	   {
	   	 comandoImprime.setRef1(t.image);
	   	 lista.add(comandoImprime);
	   }
	 )?

}

void print(List<Comando> lista) : {Expressao expressao;}
{
	<PRINT> <ABRE_PARENTESES> corpoMostra(lista) <FECHA_PARENTESES> <FIM_DA_LINHA>
}
void corpoMostra(List<Comando> lista) : {Expressao expressao;Comando comandoExibe = new Comando('I');Token t;}
{	
   (t=<TEXTO> <CONCATENAR> 
        {
           comandoExibe.setRef1(t.image);
   	       lista.add(comandoExibe);
        }
    )?
   
    expressao = exp()
	    
    {
		if(!expressao.isExpressaoTexto())
			System.err.println("ERRO!\n Erro Semântico: A expressão utilizada na estrutura print() não é compatível\n");
	   	 
	   	comandoExibe.setRef1(expressao);
	   	lista.add(comandoExibe);
	}
}

void loop(List<Comando> lista) : {LinkedList<Comando> listaEnquanto = new LinkedList<Comando>();Comando enquanto = new Comando('E');Expressao expressao;}
{
	 <REPEAT> <ABRE_PARENTESES> 
	 
	  expressao = exp()
	  
	 {
	 	enquanto.setRef1(expressao);

		//Verifica se a expressao utilizada na condicao é compativel
		if(!expressao.isExpressaoCondicional(tab))
			System.err.println("ERRO!\n Erro Semântico: A condição utilizada na estrutura enquanto(){} não é compatível\n");
	 }	 
	 <FECHA_PARENTESES>
	<ABRE_CHAVE>
	  (
	    comandos(listaEnquanto)  
	  )*
	  
	  {
	  	enquanto.setRef2(listaEnquanto);
	  	lista.add(enquanto);
	  }

	 <FECHA_CHAVE>
}
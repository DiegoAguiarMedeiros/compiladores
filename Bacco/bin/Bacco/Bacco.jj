/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Bacco)package Bacco;
import java.io.*;
public class Bacco{  public static void main(String args[])  throws ParseException  {

      Bacco analisador = null;

      try {

         analisador = new Bacco(new FileInputStream("exemplo6.bcc"));

         analisador.S();

         // System.out.println(tabela.toString());

      }

      catch(FileNotFoundException e) {

         System.out.println("Erro: arquivo não encontrado");

      }

      catch(TokenMgrError e) {

         System.out.println("Erro léxico\n" + e.getMessage());

      }

      catch(ParseException e) {

         System.out.println("Erro sintático\n" + e.getMessage());

      }

   }}PARSER_END(Bacco)SKIP : { " " | "\t" | "\r" | "\n" }

 

SKIP : {

   "@" : comentario_linha 

}
<comentario_linha> SKIP: {
	<["\n","\r"]> : DEFAULT |
   	<~[]>
}
SKIP : {

   ":--" : comentario

}

<comentario> SKIP: {

   "--:" : DEFAULT |

   <~[]>

}

 TOKEN : {

  < TEXTO: "\""["a"-"z","A"-"Z","0"-"9"," ","!"](["0"-"9"]|["a"-"z","A"-"Z"]|~["\""])* "\"" > |
  < TIPO_DECIMAL: (["0"-"9"])*(".")?(["0"-"9"])+  > |
  < TIPO_INTEGRAL:(["0"-"9"])+  >
}


 TOKEN [IGNORE_CASE] : {

  < READ: "read" > |
  < PRINT: "print" >

} 

TOKEN: {
  < START:"Start" >|
  < ATTR: "=" > |
  < ABRE_PARENTESES:"(" > |
  < FECHA_PARENTESES:")" >|
   < ABRE_CHAVE:"{" > |
  < FECHA_CHAVE:"}" >|
  < SOMA: "+" >|
  < SUB: "-" >|
  < DIVISAO: "/" >|
  < MULTI: "*" >|
  < POTENCIA: "^" >|
  < IF: "IsTrue" >|
  < ELSE:"IsNot" >|
  < TIPO_TEXTO: "text" >|
  < TIPO_NUMERICO: "number" >|
  < ID:["a"-"z","A"-"Z"](["0"-"9"]|["a"-"z","A"-"Z"])* >|
  < RELACAO: "==" | "!=" | "<" | "<=" | ">=" | ">" >|
  < AND: "&&" >|
  < OR: "||" >|
  < NOT: "!" >|
  < CONCATENAR: "#" >|
  < VIRGULA: "," > |
  < END:"End" > |
  < FIM_DA_LINHA:";" >

  
  
}


 


JAVACODE void S()

{

   Token t;

   do {

      t = getNextToken();

      System.out.println(tokenImage[t.kind]+"\t"+t.image);

   }

   while(t.kind != EOF);

}
